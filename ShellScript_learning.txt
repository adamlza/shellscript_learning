我的ShellScript成长史

#以处理视频为例

#0.0
ffmpeg -i "input0.mp4" -c:v libx265 -c:a copy "output0.mp4"
ffmpeg -i "input1.mp4" -c:v libx265 -c:a copy "output1.mp4"
ffmpeg -i "input2.mp4" -c:v libx265 -c:a copy "output2.mp4"
ffmpeg -i "input3.mp4" -c:v libx265 -c:a copy "output3.mp4"
ffmpeg -i "input4.mp4" -c:v libx265 -c:a copy "output4.mp4"
ffmpeg -i "input5.mp4" -c:v libx265 -c:a copy "output5.mp4"
ffmpeg -i "input6.mp4" -c:v libx265 -c:a copy "output6.mp4"
ffmpeg -i "input7.mp4" -c:v libx265 -c:a copy "output7.mp4"
ffmpeg -i "input8.mp4" -c:v libx265 -c:a copy "output8.mp4"
ffmpeg -i "input9.mp4" -c:v libx265 -c:a copy "output9.mp4"

#就是复制一堆一模一样的，再一个一个改
#这个效率太低了，无奈最开始啥也不会

#0.1
for i in {0..9};do
	echo "ffmpeg -i \"input"$i".mp4\" -c:v libx265 -c:a copy \"output"$i".mp4\""
done

#这个效率就高一些了，本质上就是用for循环做着和上面相同的事情，而且天生自带缺陷--单重循环下01,02,03和10,11,12不可同时实现。之后就有了第三种～

#0.2
for i in {0..2};do
	for j in {0..9};do
		echo "ffmpeg -i \"input"$i$j".mp4\" -c:v libx265 -c:a copy \"output"$i$j".mp4\""
	done
done

#这个就是为了实现从01,02,03一直到27,28,29的顺滑过渡，多嵌套了一层，本质上还是第一种

#1.0
for i in *;do
	j=$i
	ffmpeg -i "$i" -c:v libx265 -c:a copy "$i".mp4
done

#这算是第一次突破，也是真正用脚本来自动化处理

#1.1
for i in *;do
	j=$i
	k=`echo $j|sed s/input/output/g`
	ffmpeg -i "$j" -c:v libx265 -c:a copy "$k"
	rm "$j"
done

#开始用sed处理文本，可这脚本还不够"智能"，遇到目录比较复杂的情况还是麻烦得不行

#1.2
for dir in *;do
	DIR=$dir
	cd "$DIR"
	DIR_out=`echo $DIR|sed s/x264/HEVC/g`
	for video in *264*;do
		Video=$video
		for aac in *"AAC)"*;do
			AAC=$aac
			AAC_out=`echo $AAC|sed s/x264/HEVC/g`
			ffmpeg -i "$AAC" -c:v libx265 -c:a copy "$AAC_out"
		done
		for aac2 in *"AACx2)"*;do
			AAC2=$aac2
			AAC2_out=`echo $AAC2|sed s/x264/HEVC/g`
			ffmpeg -i "$AAC2" -map 0:0 -c:v libx265 -map 0:1 -map 0:2 -c:a copy "$AAC2_out"
		done
	done
	mv "$DIR" "$DIR_out"
	cd ..
done

#开始尝试批量，脚本多处重复，看起来很冗长

#2.0
ff_video(){
	local aac=$1
	local video=$2
	local ff_regex=$3
	local video_out=$4
	if [[ -n `echo $video|grep "$aac"` ]];then
		ffmpeg -i "$video" "$ff_regex" "$video_out"
		rm "$video"
	fi
}
find -name "*264*" > .videos
l=`wc -l .videos|awk '{print $1}'`
for lc in `seq 1 $l`;do
	video=`sed -n "$lc"p .videos`
	video_out=`echo $video|sed s/x264/HEVC/g`
	ff_video "AAC)"	"$video" "-c:v libx265 -c:a copy" "$video_out"
	ff_video "AACx2)" "$video" "-map 0:0 -c:v libx265 -map 0:1 -map 0:2 -c:a copy" "$video_out"
done
rm -rf *264*

#开始"面向对象"的Shell，用find告别了手动递归目录，但写入文件再读取，总归效率有点低

#2.1
blk2ds(){
	local blk=$1
	ds=`echo $blk|sed 's/ /_/g'`
	mv "$blk" $ds
}
ds2blk(){
	local ds=$1
	blk=`echo $ds|sed 's/_/ /g'`
	mv $ds "$blk"
}
ff_video(){
	local aac=$1
	local ff_regex=$2
	fn_aac=`find -name "*264*"|grep mp4|grep "$aac"`
	aacAry=(`printf "\"%s\"\n" $fn=acc`)
	for acc in `seq 1 ${#accAry}`;do
		ACC=`echo ${accAry[$acc]}`
		ACC_out=`echo $ACC|sed s/x264/HEVC/g`
		ffmpeg -i "$ACC" "$ff_regex" "$ACC_out"
		rm "$ACC"
	done
}
export -f blk2ds
export -f ds2blk
find -name "*264*" -exec bash -c "blk2ds \"{}\"" \;
ff_video "AAC)" "-c:v libx265 -c:a copy"
ff_video "AACx2)" "-map 0:0 -c:v libx265 -map 0:1 -map 0:2 -c:a copy"
find -name "*265*" -exec bash -c "ds2blk \"{}\"" \;

#大体上比较满意了，ffmpeg还支持直接编解码sftp端的视频，这个就等到3.0版本来完善罢
